<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.11.0.0">
<procedure name="main">
<interface/>
<body>
<c>*</c>
<c>* Example for the usage of the PhotoneoGenTLProducer (photoneo.cti)</c>
<c>* GENICAM_GENTL64_PATH environment variable should point to a directory, where the .cti file is located</c>
<c>*   -&gt; by default "%PHOXI_CONTROL_PATH%/API/bin/photoneo.cti"</c>
<c>* PhoXiControl must be running!</c>
<c>*</c>
<l>info_framegrabber ('GenICamTL', 'device', Information, DeviceList)</l>
<l>* device_id := 'PhotoneoTL_DEV_&lt;ID&gt;'</l>
<l>device_id := 'PhotoneoTL_DEV_InstalledExamples-basic-example'</l>
<c></c>
<l>open_framegrabber ('GenICamTL', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', device_id, 0, -1, AcqHandle)</l>
<c></c>
<l>set_framegrabber_param (AcqHandle, 'GetFrameTimeout', 10000)</l>
<c></c>
<c>* IMPORTANT:</c>
<c>* Need to set `UseFixedDataOrdering` to false in order for HALCON to receive multipart data.</c>
<c>* Our devices can send up to 8 different output data which can be enabled/disabled by the user.</c>
<c>* In case of disabled - empty data are sent, but HALCON interprets it as invalid data.</c>
<l>set_framegrabber_param (AcqHandle, 'UseFixedDataOrdering', false)</l>
<c></c>
<c>* Order of transfered images is fixed.</c>
<c>* By disabling some items, the order for `select_obj` is altered.</c>
<c>* Note: EventMap is a MotionCam-3D feature only</c>
<c>* Note: ColorCameraImage is a MotionCam-3D Color feature only</c>
<l>set_framegrabber_param (AcqHandle, 'SendTexture', 1)</l>
<l>set_framegrabber_param (AcqHandle, 'SendPointCloud', 1)</l>
<l>set_framegrabber_param (AcqHandle, 'SendNormalMap', 1)</l>
<l>set_framegrabber_param (AcqHandle, 'SendDepthMap', 1)</l>
<l>set_framegrabber_param (AcqHandle, 'SendConfidenceMap', 1)</l>
<l>* set_framegrabber_param (AcqHandle, 'SendEventMap', 1)</l>
<l>* set_framegrabber_param (AcqHandle, 'SendColorCameraImage', 1)</l>
<c></c>
<c>* Make sure device is in `Freerun` trigger mode</c>
<l>set_framegrabber_param (AcqHandle, 'PhotoneoTriggerMode', 'Freerun')</l>
<c></c>
<c>* -----------------------------------------------------------------------------</c>
<c>* Note: Acquisition is stopped and started when calling `grab_image/grab_data`.</c>
<c></c>
<c>* grab first frame (iamge only)</c>
<l>grab_image (Image, AcqHandle)   </l>
<c></c>
<c>* grab second frame (iamge only)</c>
<l>grab_image (Image, AcqHandle)  </l>
<c></c>
<c>* grab third frame (including 3D data)</c>
<l>grab_data (ImageData, Region, Contours, AcqHandle, Data)   </l>
<l>select_obj (ImageData, Texture, 1)</l>
<l>select_obj (ImageData, PointCloudX, 2)</l>
<l>select_obj (ImageData, PointCloudY, 3)</l>
<l>select_obj (ImageData, PointCloudZ, 4)</l>
<l>compose3 (PointCloudX, PointCloudY, PointCloudZ, PointCloud)</l>
<l>select_obj (ImageData, NormalMapX, 5)</l>
<l>select_obj (ImageData, NormalMapY, 6)</l>
<l>select_obj (ImageData, NormalMapZ, 7)</l>
<l>compose3 (NormalMapX, NormalMapY, NormalMapZ, NormalMap)</l>
<l>select_obj (ImageData, DepthMap, 8)</l>
<l>select_obj (ImageData, ConfidenceMap, 9)</l>
<l>* select_obj (ImageData, EventMap, 10)  </l>
<l>* select_obj (ImageData, ColorCameraImage, 11)</l>
<c></c>
<c>* Do something with data</c>
<c></c>
<c></c>
<c></c>
<c>* --------------------------------------------------------------</c>
<c>* Note: `grab_image_start` starts acquisition and is not stopped</c>
<c>*       by calling `grab_image_async/grab_data_async` methods.</c>
<l>grab_image_start (AcqHandle, -1)</l>
<c></c>
<c>* grab newest frame (iamge only)</c>
<l>grab_image_async (Image, AcqHandle, -1)  </l>
<c></c>
<c>* grab newest frame (iamge only)</c>
<l>grab_image_async (Image, AcqHandle, -1)</l>
<c></c>
<c>* grab newest frame (including 3D data)</c>
<l>grab_data_async (ImageData, Region, Contours, AcqHandle, -1, Data)</l>
<l>select_obj (ImageData, Texture, 1)</l>
<l>select_obj (ImageData, PointCloudX, 2)</l>
<l>select_obj (ImageData, PointCloudY, 3)</l>
<l>select_obj (ImageData, PointCloudZ, 4)</l>
<l>compose3 (PointCloudX, PointCloudY, PointCloudZ, PointCloud)</l>
<l>select_obj (ImageData, NormalMapX, 5)</l>
<l>select_obj (ImageData, NormalMapY, 6)</l>
<l>select_obj (ImageData, NormalMapZ, 7)</l>
<l>compose3 (NormalMapX, NormalMapY, NormalMapZ, NormalMap)</l>
<l>select_obj (ImageData, DepthMap, 8)</l>
<l>select_obj (ImageData, ConfidenceMap, 9)</l>
<l>* select_obj (ImageData, EventMap, 10)</l>
<l>* select_obj (ImageData, ColorCameraImage, 11)</l>
<c></c>
<c>* stop acquisition </c>
<l>set_framegrabber_param (AcqHandle, 'do_abort_grab', -1)</l>
<c></c>
<c>* Save last scan to a specific file format.</c>
<c>* Supported file formats are:</c>
<c>* Text file (*.txt)</c>
<c>* Stanford's PLY (*.ply)</c>
<c>* Leica's PTX (*.ptx)</c>
<c>* Photoneo's Raw data format (*.praw)</c>
<c>* Raw images data format in tif (*.tif)</c>
<c></c>
<c>* 'SaveLastScanFilePath' - Path where the file should be saved.</c>
<c>*     Absolute path is preferred (e.g. C:/Users/Public/my.praw, /home/&lt;user&gt;/my.praw),</c>
<c>*     relative path points to PhoXiControl's path (folder must exist).</c>
<c>* 'SaveLastScanFrameId' - Save only if last scan has the same frame index.</c>
<c>* 'SaveLastScanJsonOptions' - (optional) Configure save operations with options. Format:</c>
<c>*     A simple list of options in json format where a key matches an option in GUI.</c>
<c>*     Key uses the same type as in GUI, e.g. boolean, int, string, ..</c>
<c>*     If the string key does not match the existing option, the option is ignored.</c>
<c></c>
<l>json_options := '{"UseCompression": true}'</l>
<l>set_framegrabber_param (AcqHandle, 'SaveLastScanFilePath', 'C:/Users/Public/my.praw')</l>
<l>set_framegrabber_param (AcqHandle, 'SaveLastScanFrameId', -1)</l>
<l>set_framegrabber_param (AcqHandle, 'SaveLastScanJsonOptions', json_options)</l>
<l>set_framegrabber_param (AcqHandle, 'SaveLastScan', -1)</l>
<c></c>
<c>* Do something with data</c>
<c></c>
<l>close_framegrabber (AcqHandle)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
