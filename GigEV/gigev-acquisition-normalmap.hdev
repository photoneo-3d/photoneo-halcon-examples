<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.11.0.0">
<procedure name="main">
<interface/>
<body>
<c>* -----------</c>
<c>* INFORMATION</c>
<c>* -----------</c>
<c>* In order to list all available devices on the network, call 'info_framegrabber'.</c>
<c>* Photoneo devices are described as the following:</c>
<c>* '</c>
<c>*   | device:48b02d681e5a_Photoneo_MotionCam3DColor</c>
<c>*   | unique_name:48b02d681e5a_Photoneo_MotionCam3DColor</c>
<c>*   | interface:Esen_ITF_08002708c6980a06725affff0000</c>
<c>*   | producer:Esen</c>
<c>*   | vendor:Photoneo</c>
<c>*   | model:MotionCam-3D Color</c>
<c>*   | tl_type:GEV</c>
<c>*   | device_ip:10.6.118.6/16</c>
<c>*   | device_sn:TBR-046</c>
<c>*   | interface_ip:10.6.114.90/16</c>
<c>*   | status:available</c>
<c>* '</c>
<c>*</c>
<l>info_framegrabber ('GigEVision2', 'info_boards', Information, device_list)</l>
<c></c>
<c>*</c>
<c>* ----------</c>
<c>* CONNECTION</c>
<c>* ----------</c>
<c>* Connection requires to input the device's ID. HALCON's GigE Vision acquisition interface</c>
<c>* does not utilize serial numbers. Therefore one must use different ID which contains</c>
<c>* the device's MAC address.</c>
<c>*</c>
<l>device_id := '&lt;mac-addr&gt;_Photoneo_&lt;device-type&gt;'</l>
<l>open_framegrabber ('GigEVision2', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', device_id, 0, -1, acq_handle)</l>
<c></c>
<c>*</c>
<c>* ----------</c>
<c>* COMPONENTS</c>
<c>* ----------</c>
<c>* For detailed information about supported components see C++ examples:</c>
<c>* https://github.com/photoneo-3d/photoneo-cpp-examples/tree/main/GigEV</c>
<c>* or PhoXi Control manual for actual code samples.</c>
<c>*</c>
<c></c>
<c>* 'MultiPart' payload format is recommended, because chunk data are not handled correctly by HALCON.</c>
<l>set_framegrabber_param (acq_handle, 'TestPayloadFormatMode', 'MultiPart')</l>
<c></c>
<c>* Photoneo devices provide multiple components</c>
<c>* -&gt; Intensity</c>
<c>* -&gt; Range</c>
<c>* -&gt; Confidence</c>
<c>* -&gt; Normal</c>
<c>* -&gt; Event (MotionCam-3D exclusive)</c>
<c>* -&gt; ColorCamera (MotionCam-3D Color exclusive)</c>
<c>* -&gt; Reprojection</c>
<c></c>
<c>* In order to enable or disable a component,</c>
<c>* 'ComponenSelector' and 'ComponenEnable' features are required.</c>
<c>* In this example NormalMap will be created using Normal.</c>
<c>* Individual points will be colored using Intensity.</c>
<c></c>
<l>set_framegrabber_param (acq_handle, 'ComponentSelector', 'Intensity')</l>
<l>set_framegrabber_param (acq_handle, 'ComponentEnable', true)</l>
<l>set_framegrabber_param (acq_handle, 'ComponentSelector', 'Range')</l>
<l>set_framegrabber_param (acq_handle, 'ComponentEnable', false)</l>
<l>set_framegrabber_param (acq_handle, 'ComponentSelector', 'Confidence')</l>
<l>set_framegrabber_param (acq_handle, 'ComponentEnable', false)</l>
<l>set_framegrabber_param (acq_handle, 'ComponentSelector', 'Normal')</l>
<l>set_framegrabber_param (acq_handle, 'ComponentEnable', true)</l>
<l>set_framegrabber_param (acq_handle, 'ComponentSelector', 'Event')</l>
<l>set_framegrabber_param (acq_handle, 'ComponentEnable', false)</l>
<l>set_framegrabber_param (acq_handle, 'ComponentSelector', 'ColorCamera')</l>
<l>set_framegrabber_param (acq_handle, 'ComponentEnable', false)</l>
<l>set_framegrabber_param (acq_handle, 'ComponentSelector', 'Reprojection')</l>
<l>set_framegrabber_param (acq_handle, 'ComponentEnable', false)</l>
<c></c>
<c>* Adjust default timeout depending on payload size and network speed</c>
<l>set_framegrabber_param (acq_handle, 'grab_timeout', 5000)</l>
<c></c>
<c>* 'NormalsEstimationRadius' must have a non-zero value</c>
<l>set_framegrabber_param (acq_handle, 'NormalsEstimationRadius', 1)</l>
<c></c>
<c>*</c>
<c>* -----------</c>
<c>* ACQUISITION</c>
<c>* -----------</c>
<c>* Currently only 'Continuous' acquisition mode and 'FrameStart' trigger selector is supported.</c>
<c>* Examples for Freerun and Software trigger modes can be found below.</c>
<c>*</c>
<l>set_framegrabber_param (acq_handle, 'AcquisitionMode', 'Continuous')</l>
<l>set_framegrabber_param (acq_handle, 'TriggerSelector', 'FrameStart')</l>
<c></c>
<c>* Freerun</c>
<c>* -------</c>
<l>set_framegrabber_param (acq_handle, 'TriggerMode', 'Off')</l>
<c></c>
<l>for Index := 1 to 5 by 1</l>
<c>    * Retrieve only image (Intensity component must be enabled)</c>
<l>    grab_image (image, acq_handle)</l>
<c>    * do something with image...</c>
<c></c>
<c>    * Rerieve every component enabled</c>
<l>    grab_data (payload, region, countours, acq_handle, data)</l>
<l>    select_obj (payload, intensity, 1)</l>
<l>    convert_image_type (image, image_real, 'real')</l>
<c></c>
<l>    select_obj (payload, normal_raw, 2)</l>
<c>    * Note: Unfortunately, HALCON does not support `Coord3D_AC8` pixel format.</c>
<c>    * Hence the warning: Unknown or unsupported pixel format 021000b4</c>
<c>    * can only be converted to HALCON 'raw' images. (CreateHalconImage:15017)</c>
<c></c>
<c>    * Converting Raw bytes image with resolution RawSize x RawSize</c>
<c>    * RawData (1B each): θ0, φ0, θ1, φ1, θ2, φ2, θ3, φ3, θ4, φ4, ...</c>
<c>    * into 2 real images with resolution Height x Width</c>
<c>    * Theta (AngleXZ): θ0, θ1, θ2, θ3, θ4, ...</c>
<c>    * Phi (AngleZ): φ0, φ1, φ2, φ3, φ4, ...</c>
<c></c>
<l>    get_image_size (intensity, width, height)</l>
<l>    get_image_pointer1 (normal_raw, normal_raw_ptr, raw_type, width_raw, height_raw)</l>
<l>    gen_image1 (normals_uint16, 'uint2', width, height, normal_raw_ptr)</l>
<c></c>
<c>    * Low 8bits (Theta)</c>
<l>    bit_mask (normals_uint16, theta, 0xff)</l>
<l>    convert_image_type (theta, theta, 'real')</l>
<c>    * Shift to get the High 8bits (phi)</c>
<l>    bit_rshift (normals_uint16, phi, 8)</l>
<l>    convert_image_type (phi, phi, 'real')</l>
<c></c>
<l>    Pi := 3.14159265359</l>
<l>    gen_image_proto (phi, only_ones, 1)     </l>
<c></c>
<l>    mult_image (phi, only_ones, phi_rad, Pi/256, 0)</l>
<l>    mult_image (theta, only_ones, theta_rad, Pi/128, 0)</l>
<c></c>
<l>    sin_image (phi_rad, phi_rad_Sin)</l>
<l>    cos_image (phi_rad, phi_rad_cos)</l>
<l>    sin_image (theta_rad, theta_rad_sin)</l>
<l>    cos_image (theta_rad, theta_rad_cos)</l>
<c></c>
<l>    mult_image (phi_rad_Sin, theta_rad_cos, normal_x, 1, 0)</l>
<l>    mult_image (phi_rad_Sin, theta_rad_sin, normal_y, 1, 0)</l>
<l>    copy_image (phi_rad_cos, normal_z)</l>
<l>    compose3 (normal_x, normal_y, normal_z, normal_map)</l>
<l>endfor</l>
<c></c>
<l>close_framegrabber (acq_handle)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
