<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.11.0.0">
<procedure name="main">
<interface/>
<body>
<c>* -----------</c>
<c>* INFORMATION</c>
<c>* -----------</c>
<c>* In order to list all available devices on the network, call 'info_framegrabber'.</c>
<c>* Photoneo devices are described as the following:</c>
<c>* '</c>
<c>*   | device:48b02d681e5a_Photoneo_MotionCam3DColor</c>
<c>*   | unique_name:48b02d681e5a_Photoneo_MotionCam3DColor</c>
<c>*   | interface:Esen_ITF_08002708c6980a06725affff0000</c>
<c>*   | producer:Esen</c>
<c>*   | vendor:Photoneo</c>
<c>*   | model:MotionCam-3D Color</c>
<c>*   | tl_type:GEV</c>
<c>*   | device_ip:10.6.118.6/16</c>
<c>*   | device_sn:TBR-046</c>
<c>*   | interface_ip:10.6.114.90/16</c>
<c>*   | status:available</c>
<c>* '</c>
<c>*</c>
<l>info_framegrabber ('GigEVision2', 'info_boards', Information, DeviceList)</l>
<c></c>
<c>*</c>
<c>* ----------</c>
<c>* CONNECTION</c>
<c>* ----------</c>
<c>* Connection requires to input the device's ID. HALCON's GigE Vision acquisition interface</c>
<c>* does not utilize serial numbers. Therefore one must use different ID which contains</c>
<c>* the device's MAC address.</c>
<c>*</c>
<l>device_id := '&lt;mac-addr&gt;_Photoneo_&lt;device-type&gt;'</l>
<l>open_framegrabber ('GigEVision2', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', device_id, 0, -1, AcqHandle)</l>
<c></c>
<c>*</c>
<c>* ----------</c>
<c>* COMPONENTS</c>
<c>* ----------</c>
<c>* For detailed information about supported components see C++ examples</c>
<c>* or PhoXi Control manual for actual code samples.</c>
<c>*</c>
<c></c>
<c>* 'MultiPart' payload format is recommended, because chunk data are not handled correctly by HALCON.</c>
<l>set_framegrabber_param (AcqHandle, 'TestPayloadFormatMode', 'MultiPart')</l>
<c></c>
<c>* Photoneo devices provide multiple components</c>
<c>* -&gt; Intensity</c>
<c>* -&gt; Range</c>
<c>* -&gt; Confidence</c>
<c>* -&gt; Normal</c>
<c>* -&gt; Event (MotionCam-3D exclusive)</c>
<c>* -&gt; ColorCamera (MotionCam-3D Color exclusive)</c>
<c>* -&gt; Reprojection</c>
<c></c>
<c>* In order to enable or disable a component,</c>
<c>* 'ComponenSelector' and 'ComponenEnable' features are required.</c>
<c>* In this example PointCloud will be created using Range and Reprojection.</c>
<c>* Individual points will be colored using Intensity.</c>
<l>set_framegrabber_param (AcqHandle, 'ComponentSelector', 'Intensity')</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentEnable', true)</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentSelector', 'Range')</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentEnable', true)</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentSelector', 'Confidence')</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentEnable', false)</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentSelector', 'Normal')</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentEnable', false)</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentSelector', 'Event')</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentEnable', false)</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentSelector', 'ColorCamera')</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentEnable', false)</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentSelector', 'Reprojection')</l>
<l>set_framegrabber_param (AcqHandle, 'ComponentEnable', true)</l>
<c></c>
<c>* Adjust default timeout depending on payload size and network speed</c>
<l>set_framegrabber_param (AcqHandle, 'grab_timeout', 5000)</l>
<c></c>
<c>*</c>
<c>* -----------</c>
<c>* ACQUISITION</c>
<c>* -----------</c>
<c>* Currently only 'Continuous' acquisition mode and 'FrameStart' trigger selector is supported.</c>
<c>* Examples for Freerun and Software trigger modes can be found below.</c>
<c>*</c>
<l>set_framegrabber_param (AcqHandle, 'AcquisitionMode', 'Continuous')</l>
<l>set_framegrabber_param (AcqHandle, 'TriggerSelector', 'FrameStart')</l>
<c></c>
<c>* Freerun</c>
<c>* -------</c>
<l>set_framegrabber_param (AcqHandle, 'TriggerMode', 'Off')</l>
<c></c>
<l>for Index := 1 to 5 by 1</l>
<c>    * Retrieve only image (Intensity component must be enabled)</c>
<l>    grab_image (Image, AcqHandle)</l>
<c>    * do something with image...</c>
<c>    </c>
<c>    * Rerieve every component enabled</c>
<l>    grab_data (Payload, Region, Countours, AcqHandle, Data)</l>
<l>    select_obj (Payload, Intensity, 1)</l>
<l>    convert_image_type (Intensity, IntensityReal, 'real')</l>
<c></c>
<l>    select_obj (Payload, Range, 2)</l>
<l>    select_obj (Payload, ReprojectionX, 3)</l>
<l>    select_obj (Payload, ReprojectionY, 4)    </l>
<c></c>
<l>    mult_image (Range, ReprojectionX, PointCloudX, 1, 0)</l>
<l>    mult_image (Range, ReprojectionY, PointCloudY, 1, 0)</l>
<l>    copy_image (Range, PointCloudZ)</l>
<c>    </c>
<c>    * Create 3D object model and set points    </c>
<l>    xyz_to_object_model_3d (PointCloudX, PointCloudY, PointCloudZ, ObjectModel3D)</l>
<c>    </c>
<l>    get_region_points (PointCloudZ, Rows, Columns)</l>
<l>    get_grayval (IntensityReal, Rows, Columns, IntensityGray)</l>
<l>    set_object_model_3d_attrib_mod (ObjectModel3D, '&amp;intensity', 'points', IntensityGray)</l>
<c>    </c>
<c>    * Visualize the point cloud</c>
<l>    dev_close_window ()</l>
<l>    dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>    Instructions[0] := 'Rotate: Left button'</l>
<l>    Instructions[1] := 'Zoom:   Shift + left button'</l>
<l>    Instructions[2] := 'Move:   Ctrl  + left button'</l>
<l>    visualize_object_model_3d (WindowHandle, ObjectModel3D, [], [], ['intensity'], ['&amp;intensity'], [], [], [Instructions], PoseOut)</l>
<c>    </c>
<l>    stop()</l>
<c>    </c>
<l>    clear_object_model_3d (ObjectModel3D)</l>
<l>endfor</l>
<c></c>
<l>close_framegrabber (AcqHandle)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
